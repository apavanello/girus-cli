package cmd

import (
	"bufio"
	"bytes"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"runtime"
	"strings"
	"time"

	"github.com/badtuxx/girus-cli/internal/config"
	"github.com/badtuxx/girus-cli/internal/git"
	"github.com/badtuxx/girus-cli/internal/helpers"
	"github.com/badtuxx/girus-cli/internal/k8s"
	"github.com/badtuxx/girus-cli/internal/lab"
	"github.com/badtuxx/girus-cli/internal/templates"
	"github.com/schollz/progressbar/v3"
	"github.com/spf13/cobra"
)

var (
	deployFile      string
	clusterName     string
	verboseMode     bool
	labFile         string
	skipPortForward bool
	skipBrowser     bool
	repoURL         string
	repoBranch      string
	manifestPath    string
	autoApply       bool
)

var createCmd = &cobra.Command{
	Use:   "create [subcommand]",
	Short: "Comandos para criar recursos",
	Run: func(cmd *cobra.Command, args []string) {
		cmd.Help()
	},
}

var createClusterCmd = &cobra.Command{
	Use:   "cluster",
	Short: "Cria o cluster Girus",
	Long: `Cria um cluster Kind com o nome "girus" e implanta todos os componentes necess√°rios.
Por padr√£o, o deployment embutido no bin√°rio √© utilizado.`,
	Run: func(cmd *cobra.Command, args []string) {
		// Verificar se o Docker est√° instalado e funcionando
		fmt.Println("üîÑ Verificando pr√©-requisitos...")
		dockerCmd := exec.Command("docker", "--version")
		if err := dockerCmd.Run(); err != nil {
			fmt.Println("‚ùå Docker n√£o encontrado ou n√£o est√° em execu√ß√£o")
			fmt.Println("\nO Docker √© necess√°rio para criar um cluster Kind. Instru√ß√µes de instala√ß√£o:")

			// Detectar o sistema operacional para instru√ß√µes espec√≠ficas
			switch runtime.GOOS {
			case "darwin":
				// macOS
				fmt.Println("\nüì¶ Para macOS, recomendamos usar Colima (alternativa leve ao Docker Desktop):")
				fmt.Println("1. Instale o Homebrew caso n√£o tenha:")
				fmt.Println("   /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"")
				fmt.Println("2. Instale o Colima e o Docker CLI:")
				fmt.Println("   brew install colima docker")
				fmt.Println("3. Inicie o Colima:")
				fmt.Println("   colima start")
				fmt.Println("\nAlternativamente, voc√™ pode instalar o Docker Desktop para macOS de:")
				fmt.Println("https://www.docker.com/products/docker-desktop")
			case "linux":
				// Linux
				fmt.Println("\nüì¶ Para Linux, use o script de instala√ß√£o oficial:")
				fmt.Println("   curl -fsSL https://get.docker.com | bash")
				fmt.Println("\nAp√≥s a instala√ß√£o, adicione seu usu√°rio ao grupo docker para evitar usar sudo:")
				fmt.Println("   sudo usermod -aG docker $USER")
				fmt.Println("   newgrp docker")
				fmt.Println("\nE inicie o servi√ßo:")
				fmt.Println("   sudo systemctl enable docker")
				fmt.Println("   sudo systemctl start docker")
			default:
				// Windows ou outros sistemas
				fmt.Println("\nüì¶ Visite https://www.docker.com/products/docker-desktop para instru√ß√µes de instala√ß√£o para seu sistema operacional")
			}

			fmt.Println("\nAp√≥s instalar o Docker, execute novamente este comando.")
			os.Exit(1)
		}

		// Verificar se o servi√ßo Docker est√° rodando
		dockerInfoCmd := exec.Command("docker", "info")
		if err := dockerInfoCmd.Run(); err != nil {
			fmt.Println("‚ùå O servi√ßo Docker n√£o est√° em execu√ß√£o")

			switch runtime.GOOS {
			case "darwin":
				fmt.Println("\nPara macOS com Colima:")
				fmt.Println("   colima start")
				fmt.Println("\nPara Docker Desktop:")
				fmt.Println("   Inicie o aplicativo Docker Desktop")
			case "linux":
				fmt.Println("\nInicie o servi√ßo Docker:")
				fmt.Println("   sudo systemctl start docker")
			default:
				fmt.Println("\nInicie o Docker Desktop ou o servi√ßo Docker apropriado para seu sistema.")
			}

			fmt.Println("\nAp√≥s iniciar o Docker, execute novamente este comando.")
			os.Exit(1)
		}

		fmt.Println("‚úÖ Docker detectado e funcionando")

		// Verificar silenciosamente se o cluster j√° existe
		checkCmd := exec.Command("kind", "get", "clusters")
		output, err := checkCmd.Output()

		// Ignorar erros na checagem, apenas assumimos que n√£o h√° clusters
		if err == nil {
			clusters := strings.Split(strings.TrimSpace(string(output)), "\n")

			// Verificar se o cluster "girus" j√° existe
			clusterExists := false
			for _, cluster := range clusters {
				if cluster == clusterName {
					clusterExists = true
					break
				}
			}

			if clusterExists {
				fmt.Printf("‚ö†Ô∏è  Cluster Girus j√° existe.\n")
				fmt.Print("Deseja substitu√≠-lo? [s/N]: ")

				reader := bufio.NewReader(os.Stdin)
				response, _ := reader.ReadString('\n')
				response = strings.ToLower(strings.TrimSpace(response))

				if response != "s" && response != "sim" && response != "y" && response != "yes" {
					fmt.Println("Opera√ß√£o cancelada.")
					return
				}

				// Excluir o cluster existente
				fmt.Printf("Excluindo cluster Girus existente...\n")

				deleteCmd := exec.Command("kind", "delete", "cluster", "--name", clusterName)
				if verboseMode {
					deleteCmd.Stdout = os.Stdout
					deleteCmd.Stderr = os.Stderr
					if err := deleteCmd.Run(); err != nil {
						fmt.Fprintf(os.Stderr, "‚ùå Erro ao excluir o cluster existente: %v\n", err)
						fmt.Println("   Por favor, exclua manualmente com 'kind delete cluster --name girus' e tente novamente.")
						os.Exit(1)
					}
				} else {
					// Usar barra de progresso
					bar := progressbar.NewOptions(100,
						progressbar.OptionSetDescription("Excluindo cluster existente..."),
						progressbar.OptionSetWidth(80),
						progressbar.OptionShowBytes(false),
						progressbar.OptionSetPredictTime(false),
						progressbar.OptionThrottle(65*time.Millisecond),
						progressbar.OptionSetRenderBlankState(true),
						progressbar.OptionSpinnerType(14),
						progressbar.OptionFullWidth(),
					)

					var stderr bytes.Buffer
					deleteCmd.Stderr = &stderr

					// Iniciar o comando
					err := deleteCmd.Start()
					if err != nil {
						fmt.Fprintf(os.Stderr, "‚ùå Erro ao iniciar exclus√£o: %v\n", err)
						os.Exit(1)
					}

					// Atualizar a barra de progresso
					done := make(chan struct{})
					go func() {
						for {
							select {
							case <-done:
								return
							default:
								bar.Add(1)
								time.Sleep(100 * time.Millisecond)
							}
						}
					}()

					// Aguardar o final do comando
					err = deleteCmd.Wait()
					close(done)
					bar.Finish()

					if err != nil {
						fmt.Fprintf(os.Stderr, "‚ùå Erro ao excluir o cluster existente: %v\n", err)
						fmt.Println("   Detalhes t√©cnicos:", stderr.String())
						fmt.Println("   Por favor, exclua manualmente com 'kind delete cluster --name girus' e tente novamente.")
						os.Exit(1)
					}
				}

				fmt.Println("‚úÖ Cluster existente exclu√≠do com sucesso.")
			}
		}

		// Criar o cluster Kind
		fmt.Println("üîÑ Criando cluster Girus...")

		if verboseMode {
			// Executar normalmente mostrando o output
			createClusterCmd := exec.Command("kind", "create", "cluster", "--name", clusterName)
			createClusterCmd.Stdout = os.Stdout
			createClusterCmd.Stderr = os.Stderr

			if err := createClusterCmd.Run(); err != nil {
				fmt.Fprintf(os.Stderr, "‚ùå Erro ao criar o cluster Girus: %v\n", err)
				fmt.Println("   Poss√≠veis causas:")
				fmt.Println("   ‚Ä¢ Docker n√£o est√° em execu√ß√£o")
				fmt.Println("   ‚Ä¢ Permiss√µes insuficientes")
				fmt.Println("   ‚Ä¢ Conflito com cluster existente")
				os.Exit(1)
			}
		} else {
			// Usando barra de progresso (padr√£o)
			bar := progressbar.NewOptions(100,
				progressbar.OptionSetDescription("Criando cluster..."),
				progressbar.OptionSetWidth(80),
				progressbar.OptionShowBytes(false),
				progressbar.OptionSetPredictTime(false),
				progressbar.OptionThrottle(65*time.Millisecond),
				progressbar.OptionSetRenderBlankState(true),
				progressbar.OptionSpinnerType(14),
				progressbar.OptionFullWidth(),
			)

			// Executar comando sem mostrar sa√≠da
			createClusterCmd := exec.Command("kind", "create", "cluster", "--name", clusterName)
			var stderr bytes.Buffer
			createClusterCmd.Stderr = &stderr

			// Iniciar o comando
			err := createClusterCmd.Start()
			if err != nil {
				fmt.Fprintf(os.Stderr, "‚ùå Erro ao iniciar o comando: %v\n", err)
				os.Exit(1)
			}

			// Atualizar a barra de progresso enquanto o comando est√° em execu√ß√£o
			done := make(chan struct{})
			go func() {
				for {
					select {
					case <-done:
						return
					default:
						bar.Add(1)
						time.Sleep(200 * time.Millisecond)
					}
				}
			}()

			// Aguardar o final do comando
			err = createClusterCmd.Wait()
			close(done)
			bar.Finish()

			if err != nil {
				fmt.Fprintf(os.Stderr, "‚ùå Erro ao criar o cluster Girus: %v\n", err)

				// Traduzir mensagens de erro comuns
				errMsg := stderr.String()

				if strings.Contains(errMsg, "node(s) already exist for a cluster with the name") {
					fmt.Println("   Erro: J√° existe um cluster com o nome 'girus' no sistema.")
					fmt.Println("   Por favor, exclua-o primeiro com 'kind delete cluster --name girus'")
				} else if strings.Contains(errMsg, "permission denied") {
					fmt.Println("   Erro: Permiss√£o negada. Verifique as permiss√µes do Docker.")
				} else if strings.Contains(errMsg, "Cannot connect to the Docker daemon") {
					fmt.Println("   Erro: N√£o foi poss√≠vel conectar ao servi√ßo Docker.")
					fmt.Println("   Verifique se o Docker est√° em execu√ß√£o com 'systemctl status docker'")
				} else {
					fmt.Println("   Detalhes t√©cnicos:", errMsg)
				}

				os.Exit(1)
			}
		}

		fmt.Println("‚úÖ Cluster Girus criado com sucesso!")

		// Aplicar o manifesto de deployment do Girus
		fmt.Println("\nüì¶ Implantando o Girus no cluster...")

		// Verificar se existe o arquivo girus-kind-deploy.yaml
		deployYamlPath := "girus-kind-deploy.yaml"
		foundDeployFile := false

		// Verificar em diferentes locais poss√≠veis
		possiblePaths := []string{
			deployYamlPath,                      // No diret√≥rio atual
			filepath.Join("..", deployYamlPath), // Um n√≠vel acima
			filepath.Join(os.Getenv("HOME"), "REPOS", "strigus", deployYamlPath), // Caminho comum
		}

		for _, path := range possiblePaths {
			if _, err := os.Stat(path); err == nil {
				deployFile = path
				foundDeployFile = true
				break
			}
		}

		if foundDeployFile {
			fmt.Printf("üîç Usando arquivo de deployment: %s\n", deployFile)

			// Aplicar arquivo de deployment completo (j√° cont√©m o template do lab)
			if verboseMode {
				// Executar normalmente mostrando o output
				applyCmd := exec.Command("kubectl", "apply", "-f", deployFile)
				applyCmd.Stdout = os.Stdout
				applyCmd.Stderr = os.Stderr

				if err := applyCmd.Run(); err != nil {
					fmt.Fprintf(os.Stderr, "‚ùå Erro ao aplicar o manifesto do Girus: %v\n", err)
					os.Exit(1)
				}
			} else {
				// Usar barra de progresso
				bar := progressbar.NewOptions(100,
					progressbar.OptionSetDescription("Implantando Girus..."),
					progressbar.OptionSetWidth(80),
					progressbar.OptionShowBytes(false),
					progressbar.OptionSetPredictTime(false),
					progressbar.OptionThrottle(65*time.Millisecond),
					progressbar.OptionSetRenderBlankState(true),
					progressbar.OptionSpinnerType(14),
					progressbar.OptionFullWidth(),
				)

				// Executar comando sem mostrar sa√≠da
				applyCmd := exec.Command("kubectl", "apply", "-f", deployFile)
				var stderr bytes.Buffer
				applyCmd.Stderr = &stderr

				// Iniciar o comando
				err := applyCmd.Start()
				if err != nil {
					fmt.Fprintf(os.Stderr, "‚ùå Erro ao iniciar o comando: %v\n", err)
					os.Exit(1)
				}

				// Atualizar a barra de progresso enquanto o comando est√° em execu√ß√£o
				done := make(chan struct{})
				go func() {
					for {
						select {
						case <-done:
							return
						default:
							bar.Add(1)
							time.Sleep(100 * time.Millisecond)
						}
					}
				}()

				// Aguardar o final do comando
				err = applyCmd.Wait()
				close(done)
				bar.Finish()

				if err != nil {
					fmt.Fprintf(os.Stderr, "‚ùå Erro ao aplicar o manifesto do Girus: %v\n", err)
					fmt.Println("   Detalhes t√©cnicos:", stderr.String())
					os.Exit(1)
				}
			}

			fmt.Println("‚úÖ Infraestrutura e template de laborat√≥rio aplicados com sucesso!")
		} else {
			// Usar o deployment embutido como fallback
			// fmt.Println("‚ö†Ô∏è  Arquivo girus-kind-deploy.yaml n√£o encontrado, usando deployment embutido.")

			// Criar um arquivo tempor√°rio para o deployment principal
			tempFile, err := os.CreateTemp("", "girus-deploy-*.yaml")
			if err != nil {
				fmt.Fprintf(os.Stderr, "‚ùå Erro ao criar arquivo tempor√°rio: %v\n", err)
				os.Exit(1)
			}
			defer os.Remove(tempFile.Name()) // Limpar o arquivo tempor√°rio ao finalizar

			defaultDeployment, err := templates.GetManifest("defaultDeployment.yaml")
			if err != nil {
				fmt.Fprintf(os.Stderr, "Erro ao carregar o template: %v\n", err)
				return
			}

			// Escrever o conte√∫do no arquivo tempor√°rio
			if _, err := tempFile.WriteString(string(defaultDeployment)); err != nil {
				fmt.Fprintf(os.Stderr, "‚ùå Erro ao escrever no arquivo tempor√°rio: %v\n", err)
				os.Exit(1)
			}
			tempFile.Close()

			// Aplicar o deployment principal
			if verboseMode {
				// Executar normalmente mostrando o output
				applyCmd := exec.Command("kubectl", "apply", "-f", tempFile.Name())
				applyCmd.Stdout = os.Stdout
				applyCmd.Stderr = os.Stderr

				if err := applyCmd.Run(); err != nil {
					fmt.Fprintf(os.Stderr, "‚ùå Erro ao aplicar o manifesto do Girus: %v\n", err)
					os.Exit(1)
				}
			} else {
				// Usar barra de progresso para o deploy (padr√£o)
				bar := progressbar.NewOptions(100,
					progressbar.OptionSetDescription("Implantando infraestrutura..."),
					progressbar.OptionSetWidth(80),
					progressbar.OptionShowBytes(false),
					progressbar.OptionSetPredictTime(false),
					progressbar.OptionThrottle(65*time.Millisecond),
					progressbar.OptionSetRenderBlankState(true),
					progressbar.OptionSpinnerType(14),
					progressbar.OptionFullWidth(),
				)

				// Executar comando sem mostrar sa√≠da
				applyCmd := exec.Command("kubectl", "apply", "-f", tempFile.Name())
				var stderr bytes.Buffer
				applyCmd.Stderr = &stderr

				// Iniciar o comando
				err := applyCmd.Start()
				if err != nil {
					fmt.Fprintf(os.Stderr, "‚ùå Erro ao iniciar o comando: %v\n", err)
					os.Exit(1)
				}

				// Atualizar a barra de progresso enquanto o comando est√° em execu√ß√£o
				done := make(chan struct{})
				go func() {
					for {
						select {
						case <-done:
							return
						default:
							bar.Add(1)
							time.Sleep(100 * time.Millisecond)
						}
					}
				}()

				// Aguardar o final do comando
				err = applyCmd.Wait()
				close(done)
				bar.Finish()

				if err != nil {
					fmt.Fprintf(os.Stderr, "‚ùå Erro ao aplicar o manifesto do Girus: %v\n", err)
					fmt.Println("   Detalhes t√©cnicos:", stderr.String())
					os.Exit(1)
				}
			}

			fmt.Println("‚úÖ Infraestrutura b√°sica aplicada com sucesso!")

			// Agora vamos aplicar o template de laborat√≥rio que est√° embutido no bin√°rio
			fmt.Println("\nüî¨ Aplicando templates de laborat√≥rio...")

			// Listar todos os arquivos YAML dentro de manifests/
			manifestFiles, err := templates.ListManifests()
			if err != nil {
				fmt.Fprintf(os.Stderr, "‚ùå Erro ao listar templates embutidos: %v\n", err)
				fmt.Println("   A infraestrutura b√°sica foi aplicada, mas sem os templates de laborat√≥rio.")
			} else if len(manifestFiles) == 0 {
				fmt.Println("   ‚ö†Ô∏è Nenhum template de laborat√≥rio embutido encontrado.")
			} else {
				// Temos templates para aplicar
				if verboseMode {
					// Modo detalhado: Aplicar cada template individualmente mostrando logs
					fmt.Printf("   Encontrados %d templates para aplicar:\n", len(manifestFiles))
					allTemplatesApplied := true
					for _, manifestName := range manifestFiles {
						fmt.Printf("   - Aplicando %s...\n", manifestName)
						// Ler o conte√∫do do manifesto
						manifestContent, err := templates.GetManifest(manifestName)
						if err != nil {
							fmt.Fprintf(os.Stderr, "     ‚ùå Erro ao carregar o template %s: %v\n", manifestName, err)
							allTemplatesApplied = false
							continue
						}

						// Criar arquivo tempor√°rio
						tempLabFile, err := os.CreateTemp("", "girus-template-*.yaml")
						if err != nil {
							fmt.Fprintf(os.Stderr, "     ‚ùå Erro ao criar arquivo tempor√°rio para %s: %v\n", manifestName, err)
							allTemplatesApplied = false
							continue
						}
						tempPath := tempLabFile.Name() // Guardar o path antes de fechar

						// Escrever e fechar arquivo tempor√°rio
						if _, err := tempLabFile.Write(manifestContent); err != nil {
							fmt.Fprintf(os.Stderr, "     ‚ùå Erro ao escrever template %s no arquivo tempor√°rio: %v\n", manifestName, err)
							tempLabFile.Close() // Fechar mesmo em caso de erro
							os.Remove(tempPath) // Remover o tempor√°rio
							allTemplatesApplied = false
							continue
						}
						tempLabFile.Close()

						// Aplicar com kubectl
						applyCmd := exec.Command("kubectl", "apply", "-f", tempPath)
						applyCmd.Stdout = os.Stdout
						applyCmd.Stderr = os.Stderr
						if err := applyCmd.Run(); err != nil {
							fmt.Fprintf(os.Stderr, "     ‚ùå Erro ao aplicar o template %s: %v\n", manifestName, err)
							allTemplatesApplied = false
						} else {
							fmt.Printf("     ‚úÖ Template %s aplicado com sucesso!\n", manifestName)
						}
						os.Remove(tempPath) // Remover o tempor√°rio ap√≥s o uso
					}

					if allTemplatesApplied {
						fmt.Println("‚úÖ Todos os templates de laborat√≥rio embutidos aplicados com sucesso!")
					} else {
						fmt.Println("‚ö†Ô∏è Alguns templates de laborat√≥rio n√£o puderam ser aplicados.")
					}

				} else {
					// Modo com barra de progresso: Aplicar cada template individualmente
					bar := progressbar.NewOptions(len(manifestFiles),
						progressbar.OptionSetDescription("Aplicando templates de laborat√≥rio..."),
						progressbar.OptionSetWidth(80),
						progressbar.OptionShowCount(),
						progressbar.OptionSetPredictTime(false),
						progressbar.OptionThrottle(65*time.Millisecond),
						progressbar.OptionSetRenderBlankState(true),
						progressbar.OptionSpinnerType(14),
						progressbar.OptionFullWidth(),
					)

					allSuccess := true
					for _, manifestName := range manifestFiles {
						// Ler o conte√∫do do manifesto
						manifestContent, err := templates.GetManifest(manifestName)
						if err != nil {
							bar.Add(1) // Incrementar a barra mesmo com erro
							allSuccess = false
							continue
						}

						// Criar arquivo tempor√°rio
						tempLabFile, err := os.CreateTemp("", "girus-template-*.yaml")
						if err != nil {
							bar.Add(1) // Incrementar a barra mesmo com erro
							allSuccess = false
							continue
						}
						tempPath := tempLabFile.Name()

						// Escrever e fechar arquivo tempor√°rio
						if _, err := tempLabFile.Write(manifestContent); err != nil {
							tempLabFile.Close()
							os.Remove(tempPath)
							bar.Add(1) // Incrementar a barra mesmo com erro
							allSuccess = false
							continue
						}
						tempLabFile.Close()

						// Aplicar com kubectl
						applyCmd := exec.Command("kubectl", "apply", "-f", tempPath)
						var stderr bytes.Buffer
						applyCmd.Stderr = &stderr
						if err := applyCmd.Run(); err != nil {
							os.Remove(tempPath)
							bar.Add(1) // Incrementar a barra mesmo com erro
							allSuccess = false
							continue
						}

						os.Remove(tempPath)
						bar.Add(1) // Incrementar a barra ap√≥s sucesso
					}
					bar.Finish()

					if allSuccess {
						fmt.Println("‚úÖ Todos os templates de laborat√≥rio aplicados com sucesso!")
					} else {
						fmt.Println("‚ö†Ô∏è Alguns templates de laborat√≥rio n√£o puderam ser aplicados. Use --verbose para detalhes.")
					}

					// Verifica√ß√£o de diagn√≥stico para confirmar que os templates est√£o vis√≠veis
					fmt.Println("\nüîç Verificando templates de laborat√≥rio instalados:")
					listLabsCmd := exec.Command("kubectl", "get", "configmap", "-n", "girus", "-l", "app=girus-lab-template", "-o", "custom-columns=NAME:.metadata.name")
					var labsOutput bytes.Buffer
					listLabsCmd.Stdout = &labsOutput
					listLabsCmd.Stderr = &labsOutput

					if err := listLabsCmd.Run(); err == nil {
						labs := strings.Split(strings.TrimSpace(labsOutput.String()), "\n")
						if len(labs) > 1 { // Primeira linha √© o cabe√ßalho "NAME"
							fmt.Println("   Templates encontrados:")
							for i, lab := range labs {
								if i > 0 { // Pular o cabe√ßalho
									fmt.Printf("   ‚úÖ %s\n", strings.TrimSpace(lab))
								}
							}
						} else {
							fmt.Println("   ‚ö†Ô∏è Nenhum template de laborat√≥rio encontrado!")
						}
					} else {
						fmt.Println("   ‚ö†Ô∏è N√£o foi poss√≠vel verificar os templates instalados")
					}
				}

				// Reiniciar o backend para carregar os templates
				fmt.Println("\nüîÑ Reiniciando o backend para carregar os templates...")
				restartCmd := exec.Command("kubectl", "rollout", "restart", "deployment/girus-backend", "-n", "girus")
				restartCmd.Run()

				// Aguardar o rein√≠cio completar
				fmt.Println("   Aguardando o rein√≠cio do backend completar...")
				waitCmd := exec.Command("kubectl", "rollout", "status", "deployment/girus-backend", "-n", "girus", "--timeout=60s")
				// Redirecionar sa√≠da para n√£o exibir detalhes do rollout
				var waitOutput bytes.Buffer
				waitCmd.Stdout = &waitOutput
				waitCmd.Stderr = &waitOutput

				// Iniciar indicador de progresso simples
				spinChars := []string{"‚†ã", "‚†ô", "‚†π", "‚†∏", "‚†º", "‚†¥", "‚†¶", "‚†ß", "‚†á", "‚†è"}
				spinIdx := 0
				done := make(chan struct{})
				go func() {
					for {
						select {
						case <-done:
							return
						default:
							fmt.Printf("\r   %s Aguardando... ", spinChars[spinIdx])
							spinIdx = (spinIdx + 1) % len(spinChars)
							time.Sleep(100 * time.Millisecond)
						}
					}
				}()

				// Executar e aguardar
				waitCmd.Run()
				close(done)
				fmt.Println("\r   ‚úÖ Backend reiniciado com sucesso!            ")

				// Aguardar mais alguns segundos para o backend inicializar completamente
				fmt.Println("   Aguardando inicializa√ß√£o completa...")
				time.Sleep(5 * time.Second)
			}
		}

		// Ap√≥s o deploy bem-sucedido, carregar laborat√≥rios externos
		fmt.Println("\nüîç Verificando reposit√≥rios de laborat√≥rios externos...")

		// Aplicar laborat√≥rios de reposit√≥rios externos
		count, err := lab.LoadExternalLabs(verboseMode)
		if err != nil {
			fmt.Printf("‚ö†Ô∏è  Aviso ao carregar laborat√≥rios externos: %v\n", err)
		} else if count > 0 {
			fmt.Printf("‚úÖ %d laborat√≥rios externos aplicados com sucesso!\n", count)
		} else {
			fmt.Println("‚ÑπÔ∏è  Nenhum reposit√≥rio de laborat√≥rio externo configurado.")
			fmt.Println("   Para adicionar, use 'girus create lab-repo --url https://github.com/exemplo/repositorio.git'")
		}

		// Aguardar os pods do Girus ficarem prontos
		if err := k8s.WaitForPodsReady("girus", 5*time.Minute); err != nil {
			fmt.Fprintf(os.Stderr, "Aviso: %v\n", err)
			fmt.Println("Recomenda-se verificar o estado dos pods com 'kubectl get pods -n girus'")
		} else {
			fmt.Println("Todos os componentes do Girus est√£o prontos e em execu√ß√£o!")
		}

		fmt.Println("Girus implantado com sucesso no cluster!")

		// Configurar port-forward automaticamente (a menos que --skip-port-forward tenha sido especificado)
		if !skipPortForward {
			fmt.Print("\nüîå Configurando acesso aos servi√ßos do Girus... ")

			if err := k8s.SetupPortForward("girus"); err != nil {
				fmt.Println("‚ö†Ô∏è")
				fmt.Printf("N√£o foi poss√≠vel configurar o acesso autom√°tico: %v\n", err)
				fmt.Println("\nVoc√™ pode tentar configurar manualmente com os comandos:")
				fmt.Println("kubectl port-forward -n girus svc/girus-backend 8080:8080 --address 0.0.0.0")
				fmt.Println("kubectl port-forward -n girus svc/girus-frontend 8000:80 --address 0.0.0.0")
			} else {
				fmt.Println("‚úÖ")
				fmt.Println("Acesso configurado com sucesso!")
				fmt.Println("üìä Backend: http://localhost:8080")
				fmt.Println("üñ•Ô∏è  Frontend: http://localhost:8000")

				// Abrir o navegador se n√£o foi especificado para pular
				if !skipBrowser {
					fmt.Println("\nüåê Abrindo navegador com o Girus...")
					if err := helpers.OpenBrowser("http://localhost:8000"); err != nil {
						fmt.Printf("‚ö†Ô∏è  N√£o foi poss√≠vel abrir o navegador: %v\n", err)
						fmt.Println("   Acesse manualmente: http://localhost:8000")
					}
				}
			}
		} else {
			fmt.Println("\n‚è© Port-forward ignorado conforme solicitado")
			fmt.Println("\nPara acessar o Girus posteriormente, execute:")
			fmt.Println("kubectl port-forward -n girus svc/girus-backend 8080:8080 --address 0.0.0.0")
			fmt.Println("kubectl port-forward -n girus svc/girus-frontend 8000:80 --address 0.0.0.0")
		}

		// Exibir mensagem de conclus√£o
		fmt.Println("\n" + strings.Repeat("‚îÄ", 60))
		fmt.Println("‚úÖ GIRUS PRONTO PARA USO!")
		fmt.Println(strings.Repeat("‚îÄ", 60))

		// Exibir acesso ao navegador como pr√≥ximo passo
		fmt.Println("üìã PR√ìXIMOS PASSOS:")
		fmt.Println("  ‚Ä¢ Acesse o Girus no navegador:")
		fmt.Println("    http://localhost:8000")

		// Instru√ß√µes para laborat√≥rios
		fmt.Println("\n  ‚Ä¢ Para aplicar mais templates de laborat√≥rios com o Girus:")
		fmt.Println("    girus create lab -f caminho/para/lab.yaml")

		fmt.Println("\n  ‚Ä¢ Para ver todos os laborat√≥rios dispon√≠veis:")
		fmt.Println("    girus list labs")

		fmt.Println(strings.Repeat("‚îÄ", 60))
	},
}

var createLabCmd = &cobra.Command{
	Use:   "lab [lab-id] ou -f [arquivo]",
	Short: "Cria um novo laborat√≥rio no Girus",
	Long:  "Adiciona um novo laborat√≥rio ao Girus a partir de um arquivo de manifesto ConfigMap, ou cria um ambiente de laborat√≥rio a partir de um ID de template existente.\nOs templates de laborat√≥rio s√£o armazenados no diret√≥rio /labs na raiz do projeto.",
	Run: func(cmd *cobra.Command, args []string) {
		// Verificar qual modo estamos
		if labFile != "" {
			// Modo de adicionar template a partir de arquivo
			lab.AddLabFromFile(labFile, verboseMode)
		} else {
			fmt.Fprintf(os.Stderr, "Erro: Voc√™ deve especificar um arquivo de laborat√≥rio com a flag -f\n")
			fmt.Println("\nExemplo:")
			fmt.Println("  girus create lab -f meulaboratorio.yaml      # Adiciona um novo template a partir do arquivo")
			fmt.Println("  girus create lab -f /home/user/REPOS/strigus/labs/basic-linux.yaml      # Adiciona um template do diret√≥rio /labs")
			os.Exit(1)
		}
	},
}

var createLabRepoCmd = &cobra.Command{
	Use:   "lab-repo --url URL",
	Short: "Adiciona um reposit√≥rio com templates de laborat√≥rio",
	Long:  "Adiciona um reposit√≥rio Git contendo templates de laborat√≥rio para o Girus.\nO reposit√≥rio deve conter um arquivo girus-labs.yaml na raiz que descreve os laborat√≥rios dispon√≠veis.",
	Run: func(cmd *cobra.Command, args []string) {
		// Verificar se a URL foi fornecida
		if repoURL == "" {
			fmt.Println("‚ùå Erro: √â necess√°rio fornecer a URL do reposit√≥rio com a flag --url")
			fmt.Println("\nExemplo:")
			fmt.Println("  girus create lab-repo --url https://github.com/exemplo/labs.git")
			os.Exit(1)
		}

		// Definir valores padr√£o
		if repoBranch == "" {
			repoBranch = "main"
		}

		if manifestPath == "" {
			manifestPath = "girus-labs.yaml"
		}

		// Verificar se o reposit√≥rio j√° existe
		existingRepos, err := config.GetExternalRepositories()
		if err != nil {
			fmt.Printf("‚ö†Ô∏è Erro ao verificar reposit√≥rios existentes: %v\n", err)
			// Continua mesmo com erro, assumindo que √© um novo reposit√≥rio
		}

		isUpdate := false
		for _, repo := range existingRepos {
			if repo.URL == repoURL {
				isUpdate = true
				break
			}
		}

		if isUpdate {
			fmt.Printf("üîÑ Atualizando reposit√≥rio de laborat√≥rios: %s (branch: %s)\n", repoURL, repoBranch)
		} else {
			fmt.Printf("üîç Adicionando reposit√≥rio de laborat√≥rios: %s (branch: %s)\n", repoURL, repoBranch)
		}

		// Criar barra de progresso para o processo de clonagem
		bar := progressbar.NewOptions(100,
			progressbar.OptionSetDescription("Clonando reposit√≥rio..."),
			progressbar.OptionSetWidth(80),
			progressbar.OptionShowBytes(false),
			progressbar.OptionSetPredictTime(false),
			progressbar.OptionThrottle(65*time.Millisecond),
			progressbar.OptionSetRenderBlankState(true),
			progressbar.OptionSpinnerType(14),
			progressbar.OptionFullWidth(),
		)

		// Tentar clonar o reposit√≥rio para validar
		go func() {
			for i := 0; i < 100; i++ {
				bar.Add(1)
				time.Sleep(50 * time.Millisecond)
			}
		}()

		repoPath, _, err := git.CloneRepository(repoURL, repoBranch)
		if err != nil {
			bar.Finish()
			fmt.Println("‚ùå Erro ao clonar reposit√≥rio:", err)
			fmt.Println("\nVerifique se:")
			fmt.Println("  ‚Ä¢ A URL do reposit√≥rio est√° correta")
			fmt.Println("  ‚Ä¢ O branch especificado existe")
			fmt.Println("  ‚Ä¢ Voc√™ tem conex√£o com a internet")
			os.Exit(1)
		}

		// Limpar o reposit√≥rio clonado quando terminarmos
		defer git.CleanupRepo(repoPath)
		bar.Finish()

		// Verificar se o arquivo de manifesto existe
		if !git.FileExists(repoPath, manifestPath) {
			fmt.Printf("‚ùå Arquivo de manifesto '%s' n√£o encontrado no reposit√≥rio\n", manifestPath)
			fmt.Println("\nO reposit√≥rio deve conter um arquivo que descreve os laborat√≥rios dispon√≠veis.")
			fmt.Println("Por padr√£o, este arquivo √© 'girus-labs.yaml' na raiz do reposit√≥rio.")
			fmt.Println("\nVoc√™ pode especificar um caminho personalizado com --manifest-path.")
			fmt.Println("Exemplo: girus create lab-repo --url URL --manifest-path config/labs.yaml")
			os.Exit(1)
		}

		// Ler e validar o manifesto
		manifestData, err := git.GetFile(repoPath, manifestPath)
		if err != nil {
			fmt.Printf("‚ùå Erro ao ler arquivo de manifesto: %v\n", err)
			os.Exit(1)
		}

		manifest, err := lab.ParseLabManifest(manifestData)
		if err != nil {
			fmt.Printf("‚ùå Erro ao processar manifesto: %v\n", err)
			os.Exit(1)
		}

		if err := lab.ValidateManifest(manifest); err != nil {
			fmt.Printf("‚ùå Manifesto inv√°lido: %v\n", err)
			os.Exit(1)
		}

		// Adicionar ou atualizar o reposit√≥rio na configura√ß√£o
		repo := config.ExternalLabRepository{
			URL:          repoURL,
			Branch:       repoBranch,
			ManifestPath: manifestPath,
			Description:  manifest.Description,
		}

		if err := config.AddRepository(repo); err != nil {
			fmt.Printf("‚ùå Erro ao salvar a configura√ß√£o: %v\n", err)
			os.Exit(1)
		}

		// Mostrar informa√ß√µes sobre os labs encontrados
		if isUpdate {
			fmt.Printf("\n‚úÖ Reposit√≥rio de laborat√≥rios atualizado com sucesso!\n")
		} else {
			fmt.Printf("\n‚úÖ Reposit√≥rio de laborat√≥rios adicionado com sucesso!\n")
		}

		fmt.Printf("\nüìö Nome: %s\n", manifest.Name)
		if manifest.Description != "" {
			fmt.Printf("üìù Descri√ß√£o: %s\n", manifest.Description)
		}
		fmt.Printf("\nüß™ Laborat√≥rios encontrados (%d):\n", len(manifest.Labs))
		for _, labEntry := range manifest.Labs {
			fmt.Printf("  ‚Ä¢ %s", labEntry.Name)
			if labEntry.Description != "" {
				fmt.Printf(" - %s", labEntry.Description)
			}
			fmt.Println()
		}

		// Perguntar ao usu√°rio se deseja aplicar os laborat√≥rios agora
		if !autoApply {
			fmt.Print("\nDeseja aplicar os laborat√≥rios agora? [S/n]: ")
			reader := bufio.NewReader(os.Stdin)
			response, _ := reader.ReadString('\n')
			response = strings.ToLower(strings.TrimSpace(response))

			if response == "n" || response == "n√£o" || response == "nao" || response == "no" {
				fmt.Println("\nüìã PR√ìXIMOS PASSOS:")
				fmt.Println("  ‚Ä¢ Para aplicar os laborat√≥rios manualmente, execute:")
				fmt.Println("    girus create lab-repo --url", repoURL, "--apply")
				return
			}
		}

		// Aplicar os laborat√≥rios automaticamente
		fmt.Println("\nüöÄ Aplicando laborat√≥rios do reposit√≥rio...")
		applied, err := lab.ProcessExternalRepo(repo, verboseMode)
		if err != nil {
			fmt.Printf("‚ùå Erro ao processar reposit√≥rio: %v\n", err)
			os.Exit(1)
		}

		fmt.Printf("\n‚úÖ %d laborat√≥rios aplicados com sucesso!\n", len(applied))
		fmt.Println("   Os laborat√≥rios est√£o dispon√≠veis no Girus.")

		// Se nenhum laborat√≥rio foi aplicado com sucesso
		if len(applied) == 0 {
			fmt.Println("\n‚ö†Ô∏è  Nenhum laborat√≥rio foi aplicado.")
			fmt.Println("   Verifique se os arquivos de laborat√≥rio no manifesto existem no reposit√≥rio.")
		}

		fmt.Println("\nüìã PR√ìXIMOS PASSOS:")
		fmt.Println("  ‚Ä¢ Acesse a interface web do Girus para ver seus novos laborat√≥rios")
		fmt.Println("  ‚Ä¢ Execute 'girus list labs' para ver todos os laborat√≥rios dispon√≠veis")
	},
}

func init() {
	createCmd.AddCommand(createClusterCmd)
	createCmd.AddCommand(createLabCmd)
	createCmd.AddCommand(createLabRepoCmd)

	// Flags para createClusterCmd
	createClusterCmd.Flags().StringVarP(&deployFile, "file", "f", "", "Arquivo YAML para deployment do Girus (opcional)")
	createClusterCmd.Flags().BoolVarP(&verboseMode, "verbose", "v", false, "Modo detalhado com output completo em vez da barra de progresso")
	createClusterCmd.Flags().BoolVarP(&skipPortForward, "skip-port-forward", "", false, "N√£o perguntar sobre configurar port-forwarding")
	createClusterCmd.Flags().BoolVarP(&skipBrowser, "skip-browser", "", false, "N√£o abrir o navegador automaticamente")

	// Flags para createLabCmd
	createLabCmd.Flags().StringVarP(&labFile, "file", "f", "", "Arquivo de manifesto do laborat√≥rio (ConfigMap)")
	createLabCmd.Flags().BoolVarP(&verboseMode, "verbose", "v", false, "Modo detalhado com output completo em vez da barra de progresso")

	// Flags para createLabRepoCmd
	createLabRepoCmd.Flags().StringVarP(&repoURL, "url", "u", "", "URL do reposit√≥rio Git com templates de laborat√≥rios")
	createLabRepoCmd.Flags().StringVarP(&repoBranch, "branch", "b", "main", "Branch do reposit√≥rio a ser usado")
	createLabRepoCmd.Flags().StringVarP(&manifestPath, "manifest-path", "m", "girus-labs.yaml", "Caminho para o arquivo de manifesto dentro do reposit√≥rio")
	createLabRepoCmd.Flags().BoolVarP(&verboseMode, "verbose", "v", false, "Modo detalhado com output completo")
	createLabRepoCmd.Flags().BoolVarP(&autoApply, "apply", "a", false, "Aplicar automaticamente os laborat√≥rios sem perguntar")

	// Marcar flags obrigat√≥rias
	createLabRepoCmd.MarkFlagRequired("url")

	// definir o nome do cluster como "girus" sempre
	clusterName = "girus"
}
