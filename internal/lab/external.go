// Package lab implementa funcionalidades relacionadas aos laborat√≥rios do Girus
package lab

import (
	"bytes"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"time"

	"github.com/badtuxx/girus-cli/internal/config"
	"github.com/badtuxx/girus-cli/internal/git"
	"github.com/badtuxx/girus-cli/internal/helpers"
	"github.com/badtuxx/girus-cli/internal/k8s"
	"github.com/schollz/progressbar/v3"
	"gopkg.in/yaml.v3"
)

// BackendRestartStatus controla se o backend j√° foi reiniciado nesta execu√ß√£o
var BackendRestartNeeded = false

// LabManifest representa a estrutura do arquivo de manifesto de labs
type LabManifest struct {
	Name        string     `yaml:"name"`
	Description string     `yaml:"description"`
	Labs        []LabEntry `yaml:"labs"`
}

// LabEntry representa um laborat√≥rio individual no manifesto
type LabEntry struct {
	Name        string `yaml:"name"`
	Path        string `yaml:"path"`
	Description string `yaml:"description"`
}

// ParseLabManifest analisa o conte√∫do de um arquivo de manifesto de laborat√≥rios
func ParseLabManifest(data []byte) (*LabManifest, error) {
	manifest := &LabManifest{}
	err := yaml.Unmarshal(data, manifest)
	if err != nil {
		return nil, fmt.Errorf("erro ao analisar o manifesto de labs: %w", err)
	}

	return manifest, nil
}

// ValidateManifest valida se o manifesto tem a estrutura correta
func ValidateManifest(manifest *LabManifest) error {
	// Verifica se o manifesto tem nome
	if manifest.Name == "" {
		return fmt.Errorf("o manifesto de labs n√£o possui um nome")
	}

	// Verifica se h√° labs definidos
	if len(manifest.Labs) == 0 {
		return fmt.Errorf("o manifesto n√£o cont√©m defini√ß√µes de laborat√≥rios")
	}

	// Verifica cada entrada de lab
	for i, lab := range manifest.Labs {
		if lab.Name == "" {
			return fmt.Errorf("lab #%d n√£o possui nome", i+1)
		}
		if lab.Path == "" {
			return fmt.Errorf("lab '%s' n√£o possui caminho para o arquivo", lab.Name)
		}
	}

	return nil
}

// ApplySingleLabFile aplica um √∫nico arquivo de lab sem reiniciar o backend
// Esta √© uma vers√£o modificada do AddLabFromFile que n√£o reinicia o backend automaticamente
func ApplySingleLabFile(labFile string, verboseMode bool) error {
	// Verificar se o arquivo existe
	if _, err := os.Stat(labFile); os.IsNotExist(err) {
		return fmt.Errorf("arquivo '%s' n√£o encontrado", labFile)
	}

	if verboseMode {
		fmt.Printf("üì¶ Processando laborat√≥rio: %s\n", labFile)
		fmt.Println("   Aplicando ConfigMap no cluster...")
	}

	// Aplicar o ConfigMap no cluster
	applyCmd := exec.Command("kubectl", "apply", "-f", labFile)
	var stderr bytes.Buffer
	applyCmd.Stderr = &stderr

	if verboseMode {
		applyCmd.Stdout = os.Stdout
		applyCmd.Stderr = os.Stderr
	}

	if err := applyCmd.Run(); err != nil {
		return fmt.Errorf("erro ao aplicar o laborat√≥rio: %v - %s", err, stderr.String())
	}

	return nil
}

// RestartBackendAfterLabsApplied reinicia o backend para carregar os novos templates
func RestartBackendAfterLabsApplied(verboseMode bool) error {
	fmt.Println("\nüîÑ Reiniciando backend para carregar novos templates...")

	// Reiniciar o deployment do backend
	restartCmd := exec.Command("kubectl", "rollout", "restart", "deployment/girus-backend", "-n", "girus")
	var stderr bytes.Buffer
	restartCmd.Stderr = &stderr

	if verboseMode {
		restartCmd.Stdout = os.Stdout
		restartCmd.Stderr = os.Stderr
	}

	err := restartCmd.Run()
	if err != nil {
		return fmt.Errorf("erro ao reiniciar o backend: %v - %s", err, stderr.String())
	}

	// Usar barra de progresso para aguardar
	bar := progressbar.NewOptions(100,
		progressbar.OptionSetDescription("   Aguardando rein√≠cio do backend"),
		progressbar.OptionSetWidth(80),
		progressbar.OptionShowBytes(false),
		progressbar.OptionSetPredictTime(false),
		progressbar.OptionThrottle(65*time.Millisecond),
		progressbar.OptionSetRenderBlankState(true),
		progressbar.OptionSpinnerType(14),
		progressbar.OptionFullWidth(),
	)

	// Aguardar o rein√≠cio completar
	waitCmd := exec.Command("kubectl", "rollout", "status", "deployment/girus-backend", "-n", "girus", "--timeout=60s")
	var waitOutput bytes.Buffer
	waitCmd.Stdout = &waitOutput
	waitCmd.Stderr = &waitOutput

	// Iniciar o comando
	err = waitCmd.Start()
	if err != nil {
		bar.Finish()
		return fmt.Errorf("erro ao verificar status do rein√≠cio: %v", err)
	}

	// Atualizar a barra de progresso enquanto o comando est√° em execu√ß√£o
	done := make(chan struct{})
	go func() {
		for {
			select {
			case <-done:
				return
			default:
				bar.Add(1)
				time.Sleep(100 * time.Millisecond)
			}
		}
	}()

	// Aguardar o final do comando
	waitCmd.Wait()
	close(done)
	bar.Finish()

	// Aguardar mais alguns segundos para que o backend reinicie completamente
	fmt.Println("   Aguardando inicializa√ß√£o completa...")
	time.Sleep(3 * time.Second)

	// Verificar se precisamos reconfigurar os port-forwards
	portForwardStatus := helpers.CheckPortForwardNeeded()
	if portForwardStatus {
		fmt.Println("\nüîå Reconfigurando port-forwards ap√≥s rein√≠cio do backend...")
		if err := k8s.SetupPortForward("girus"); err != nil {
			fmt.Println("‚ö†Ô∏è Aviso:", err)
			fmt.Println("   Para configurar manualmente, execute:")
			fmt.Println("   kubectl port-forward -n girus svc/girus-backend 8080:8080 --address 0.0.0.0")
			fmt.Println("   kubectl port-forward -n girus svc/girus-frontend 8000:80 --address 0.0.0.0")
		} else {
			fmt.Println("‚úÖ Port-forwards reconfigurados com sucesso!")
		}
	}

	return nil
}

// ProcessExternalRepo processa um reposit√≥rio externo para extrair laborat√≥rios
func ProcessExternalRepo(repo config.ExternalLabRepository, verboseMode bool) ([]string, error) {
	appliedLabs := []string{}

	// Clona o reposit√≥rio
	fmt.Printf("üì¶ Clonando reposit√≥rio %s...\n", repo.URL)
	repoPath, _, err := git.CloneRepository(repo.URL, repo.Branch)
	if err != nil {
		return nil, fmt.Errorf("erro ao clonar reposit√≥rio: %w", err)
	}
	defer git.CleanupRepo(repoPath)

	// L√™ o arquivo de manifesto
	fmt.Printf("üîç Lendo arquivo de manifesto: %s\n", repo.ManifestPath)
	manifestData, err := git.GetFile(repoPath, repo.ManifestPath)
	if err != nil {
		return nil, fmt.Errorf("erro ao ler arquivo de manifesto: %w", err)
	}

	// Analisa o manifesto
	manifest, err := ParseLabManifest(manifestData)
	if err != nil {
		return nil, fmt.Errorf("erro ao analisar manifesto: %w", err)
	}

	// Valida o manifesto
	if err := ValidateManifest(manifest); err != nil {
		return nil, fmt.Errorf("manifesto inv√°lido: %w", err)
	}

	fmt.Printf("‚úÖ Encontrados %d laborat√≥rios no reposit√≥rio\n", len(manifest.Labs))

	// Processa cada lab definido no manifesto
	for _, labEntry := range manifest.Labs {
		fmt.Printf("   - Processando laborat√≥rio: %s\n", labEntry.Name)

		// Constr√≥i o caminho completo para o arquivo do lab
		labFilePath := filepath.Join(repoPath, labEntry.Path)

		// Verifica se o arquivo existe
		if _, err := os.Stat(labFilePath); os.IsNotExist(err) {
			fmt.Printf("‚ö†Ô∏è  Arquivo de lab n√£o encontrado: %s\n", labEntry.Path)
			continue
		}

		// Extrai o lab para um arquivo tempor√°rio
		tempFile, err := ExtractLabFile(repoPath, labEntry.Path)
		if err != nil {
			fmt.Printf("‚ùå Erro ao extrair laborat√≥rio %s: %v\n", labEntry.Name, err)
			continue
		}

		// Aplica o lab usando a vers√£o modificada que n√£o reinicia o backend
		fmt.Printf("   - Aplicando laborat√≥rio: %s\n", labEntry.Name)
		if err := ApplySingleLabFile(tempFile, verboseMode); err != nil {
			fmt.Printf("‚ùå Erro ao aplicar laborat√≥rio %s: %v\n", labEntry.Name, err)
			os.Remove(tempFile)
			continue
		}

		// Remove o arquivo tempor√°rio ap√≥s o uso
		os.Remove(tempFile)

		// Registra que o lab foi aplicado
		appliedLabs = append(appliedLabs, labEntry.Name)
	}

	// Se aplicou algum laborat√≥rio, reinicia o backend uma √∫nica vez
	if len(appliedLabs) > 0 {
		if err := RestartBackendAfterLabsApplied(verboseMode); err != nil {
			fmt.Printf("‚ö†Ô∏è Aviso ao reiniciar backend: %v\n", err)
			fmt.Println("   Os laborat√≥rios foram aplicados, mas pode ser necess√°rio reiniciar o backend manualmente:")
			fmt.Println("   kubectl rollout restart deployment/girus-backend -n girus")
		}
	}

	return appliedLabs, nil
}

// ExtractLabFile extrai um arquivo de lab do reposit√≥rio para um arquivo tempor√°rio
func ExtractLabFile(repoPath, labPath string) (string, error) {
	// Constr√≥i o caminho completo para o arquivo do lab
	labFilePath := filepath.Join(repoPath, labPath)

	// Verifica se o arquivo existe
	if _, err := os.Stat(labFilePath); os.IsNotExist(err) {
		return "", fmt.Errorf("arquivo de lab n√£o encontrado: %s", labPath)
	}

	// L√™ o conte√∫do do arquivo
	content, err := os.ReadFile(labFilePath)
	if err != nil {
		return "", fmt.Errorf("erro ao ler arquivo de lab: %w", err)
	}

	// Cria um arquivo tempor√°rio para o lab
	tempFile, err := os.CreateTemp("", "girus-lab-*.yaml")
	if err != nil {
		return "", fmt.Errorf("erro ao criar arquivo tempor√°rio: %w", err)
	}

	// Escreve o conte√∫do no arquivo tempor√°rio
	if _, err := tempFile.Write(content); err != nil {
		tempFile.Close()
		os.Remove(tempFile.Name())
		return "", fmt.Errorf("erro ao escrever no arquivo tempor√°rio: %w", err)
	}

	tempFile.Close()
	return tempFile.Name(), nil
}

// GetRepoNameFromURL extrai o nome do reposit√≥rio a partir da URL
func GetRepoNameFromURL(url string) string {
	// Remove o .git do final, se presente
	url = strings.TrimSuffix(url, ".git")

	// Divide a URL por / e pega o √∫ltimo segmento
	parts := strings.Split(url, "/")
	if len(parts) > 0 {
		return parts[len(parts)-1]
	}

	return "unknown-repo"
}

// ApplyLabFromExternalRepo aplica um lab espec√≠fico de um reposit√≥rio externo
func ApplyLabFromExternalRepo(repo config.ExternalLabRepository, labName string, verboseMode bool) error {
	// Clona o reposit√≥rio
	repoPath, _, err := git.CloneRepository(repo.URL, repo.Branch)
	if err != nil {
		return fmt.Errorf("erro ao clonar reposit√≥rio: %w", err)
	}
	defer git.CleanupRepo(repoPath)

	// L√™ o arquivo de manifesto
	manifestData, err := git.GetFile(repoPath, repo.ManifestPath)
	if err != nil {
		return fmt.Errorf("erro ao ler arquivo de manifesto: %w", err)
	}

	// Analisa o manifesto
	manifest, err := ParseLabManifest(manifestData)
	if err != nil {
		return fmt.Errorf("erro ao analisar manifesto: %w", err)
	}

	// Procura o lab pelo nome
	var labEntry *LabEntry
	for i := range manifest.Labs {
		if manifest.Labs[i].Name == labName {
			labEntry = &manifest.Labs[i]
			break
		}
	}

	if labEntry == nil {
		return fmt.Errorf("laborat√≥rio '%s' n√£o encontrado no reposit√≥rio", labName)
	}

	// Extrai o lab para um arquivo tempor√°rio
	tempFile, err := ExtractLabFile(repoPath, labEntry.Path)
	if err != nil {
		return fmt.Errorf("erro ao extrair laborat√≥rio: %w", err)
	}
	defer os.Remove(tempFile)

	// Aplica o lab usando a fun√ß√£o que n√£o reinicia o backend
	if err := ApplySingleLabFile(tempFile, verboseMode); err != nil {
		return fmt.Errorf("erro ao aplicar laborat√≥rio: %w", err)
	}

	// Reinicia o backend uma √∫nica vez ap√≥s aplicar o lab
	if err := RestartBackendAfterLabsApplied(verboseMode); err != nil {
		return fmt.Errorf("aviso ao reiniciar backend: %w", err)
	}

	return nil
}

// LoadExternalLabs carrega laborat√≥rios de reposit√≥rios externos
func LoadExternalLabs(verboseMode bool) (int, []string, error) {
	// Obt√©m a lista de reposit√≥rios externos
	repos, err := config.GetExternalRepositories()
	if err != nil {
		return 0, nil, fmt.Errorf("erro ao carregar configura√ß√£o de reposit√≥rios: %w", err)
	}

	if len(repos) == 0 {
		// Nenhum reposit√≥rio configurado
		return 0, nil, nil
	}

	// Conta o total de laborat√≥rios aplicados
	totalApplied := 0
	allAppliedLabs := []string{}

	fmt.Printf("üîç Carregando reposit√≥rios de laborat√≥rios externos (%d)...\n", len(repos))

	// Processa cada reposit√≥rio, aplicando os labs mas sem reiniciar o backend
	for _, repo := range repos {
		fmt.Printf("\nüì¶ Reposit√≥rio: %s\n", repo.URL)

		repoPath, _, err := git.CloneRepository(repo.URL, repo.Branch)
		if err != nil {
			fmt.Printf("‚ö†Ô∏è  Erro ao clonar reposit√≥rio %s: %v\n", repo.URL, err)
			continue
		}
		defer git.CleanupRepo(repoPath)

		manifestData, err := git.GetFile(repoPath, repo.ManifestPath)
		if err != nil {
			fmt.Printf("‚ö†Ô∏è  Erro ao ler arquivo de manifesto %s: %v\n", repo.ManifestPath, err)
			continue
		}

		manifest, err := ParseLabManifest(manifestData)
		if err != nil {
			fmt.Printf("‚ö†Ô∏è  Erro ao analisar manifesto %s: %v\n", repo.ManifestPath, err)
			continue
		}

		if err := ValidateManifest(manifest); err != nil {
			fmt.Printf("‚ö†Ô∏è  Manifesto inv√°lido %s: %v\n", repo.ManifestPath, err)
			continue
		}

		// Processa os laborat√≥rios sem reiniciar o backend
		fmt.Printf("‚úÖ Encontrados %d laborat√≥rios no reposit√≥rio\n", len(manifest.Labs))
		appliedCount := 0

		for _, labEntry := range manifest.Labs {
			fmt.Printf("   - Processando laborat√≥rio: %s\n", labEntry.Name)

			labFilePath := filepath.Join(repoPath, labEntry.Path)
			if _, err := os.Stat(labFilePath); os.IsNotExist(err) {
				fmt.Printf("‚ö†Ô∏è  Arquivo de lab n√£o encontrado: %s\n", labEntry.Path)
				continue
			}

			tempFile, err := ExtractLabFile(repoPath, labEntry.Path)
			if err != nil {
				fmt.Printf("‚ùå Erro ao extrair laborat√≥rio %s: %v\n", labEntry.Name, err)
				continue
			}

			if err := ApplySingleLabFile(tempFile, verboseMode); err != nil {
				fmt.Printf("‚ùå Erro ao aplicar laborat√≥rio %s: %v\n", labEntry.Name, err)
				os.Remove(tempFile)
				continue
			}

			os.Remove(tempFile)
			appliedCount++
			allAppliedLabs = append(allAppliedLabs, labEntry.Name)
		}

		fmt.Printf("‚úÖ %d laborat√≥rios aplicados do reposit√≥rio %s\n", appliedCount, GetRepoNameFromURL(repo.URL))
		totalApplied += appliedCount
	}

	// Se pelo menos um laborat√≥rio foi aplicado, reinicia o backend uma √∫nica vez
	if totalApplied > 0 {
		if err := RestartBackendAfterLabsApplied(verboseMode); err != nil {
			fmt.Printf("‚ö†Ô∏è Aviso ao reiniciar backend: %v\n", err)
			fmt.Println("   Os laborat√≥rios foram aplicados, mas pode ser necess√°rio reiniciar o backend manualmente:")
			fmt.Println("   kubectl rollout restart deployment/girus-backend -n girus")
		}
	}

	return totalApplied, allAppliedLabs, nil
}
